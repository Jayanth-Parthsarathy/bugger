// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            Role         @default(DEVELOPER)
  company         Company?     @relation(fields: [companyId], references: [id])
  companyId       String?
  assignedTickets Ticket[]     @relation("assignedTickets")
  isBanned        Boolean      @default(false)
  reportedTickets Ticket[]     @relation("reportedTickets")
  comments        Comment[]
  createdProjects Project[]    @relation("createdProjects")
  joinRequest     JoinRequest?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  tickets     Ticket[]
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  createdBy   User     @relation("createdProjects", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ticket {
  id          String    @id @default(cuid())
  title       String
  description String
  priority    Priority  @default(LOW)
  status      Status    @default(NEW)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  assignedTo  User[]    @relation("assignedTickets")
  reporter    User      @relation("reportedTickets", fields: [reporterId], references: [id])
  reporterId  String
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  projects    Project[]
  members     User[]
  joinRequest JoinRequest[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model JoinRequest {
  id        String            @id @default(cuid())
  user      User              @relation(fields: [userId], references: [id])
  userId    String            @unique
  company   Company           @relation(fields: [companyId], references: [id])
  companyId String
  status    JoinRequestStatus @default(PENDING)
  message   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

enum Role {
  DEVELOPER
  ADMIN
  REPORTER
  TESTER
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Status {
  NEW
  OPEN
  IN_PROGRESS
  RESOLVED
  ADDITIONAL_INFO_REQUIRED
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  DENIED
}
